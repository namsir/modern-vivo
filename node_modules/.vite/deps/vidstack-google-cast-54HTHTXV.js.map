{
  "version": 3,
  "sources": ["../../vidstack/dev/providers/vidstack-google-cast.js"],
  "sourcesContent": ["import { listenEvent, effect, untrack, createScope, keysOf, onDispose, DOMEvent, peek } from '../chunks/vidstack-Bu2kfzUd.js';\nimport { TimeRange } from '../chunks/vidstack-BFg1ZqiG.js';\nimport { RAFLoop } from '../chunks/vidstack-qh1N5_f_.js';\nimport { ListSymbol } from '../chunks/vidstack-Dv_LIPFu.js';\nimport { getCastSessionMedia, getCastContext, getCastSession, hasActiveCastSession, listenCastContextEvent, getCastErrorMessage } from '../chunks/vidstack-DDwbYVHV.js';\n\nclass GoogleCastMediaInfoBuilder {\n  #info;\n  constructor(src) {\n    this.#info = new chrome.cast.media.MediaInfo(src.src, src.type);\n  }\n  build() {\n    return this.#info;\n  }\n  setStreamType(streamType) {\n    if (streamType.includes(\"live\")) {\n      this.#info.streamType = chrome.cast.media.StreamType.LIVE;\n    } else {\n      this.#info.streamType = chrome.cast.media.StreamType.BUFFERED;\n    }\n    return this;\n  }\n  setTracks(tracks) {\n    this.#info.tracks = tracks.map(this.#buildCastTrack);\n    return this;\n  }\n  setMetadata(title, poster) {\n    this.#info.metadata = new chrome.cast.media.GenericMediaMetadata();\n    this.#info.metadata.title = title;\n    this.#info.metadata.images = [{ url: poster }];\n    return this;\n  }\n  #buildCastTrack(track, trackId) {\n    const castTrack = new chrome.cast.media.Track(trackId, chrome.cast.media.TrackType.TEXT);\n    castTrack.name = track.label;\n    castTrack.trackContentId = track.src;\n    castTrack.trackContentType = \"text/vtt\";\n    castTrack.language = track.language;\n    castTrack.subtype = track.kind.toUpperCase();\n    return castTrack;\n  }\n}\n\nclass GoogleCastTracksManager {\n  #cast;\n  #ctx;\n  #onNewLocalTracks;\n  constructor(cast, ctx, onNewLocalTracks) {\n    this.#cast = cast;\n    this.#ctx = ctx;\n    this.#onNewLocalTracks = onNewLocalTracks;\n  }\n  setup() {\n    const syncRemoteActiveIds = this.syncRemoteActiveIds.bind(this);\n    listenEvent(this.#ctx.audioTracks, \"change\", syncRemoteActiveIds);\n    listenEvent(this.#ctx.textTracks, \"mode-change\", syncRemoteActiveIds);\n    effect(this.#syncLocalTracks.bind(this));\n  }\n  getLocalTextTracks() {\n    return this.#ctx.$state.textTracks().filter((track) => track.src && track.type === \"vtt\");\n  }\n  #getLocalAudioTracks() {\n    return this.#ctx.$state.audioTracks();\n  }\n  #getRemoteTracks(type) {\n    const tracks = this.#cast.mediaInfo?.tracks ?? [];\n    return type ? tracks.filter((track) => track.type === type) : tracks;\n  }\n  #getRemoteActiveIds() {\n    const activeIds = [], activeLocalAudioTrack = this.#getLocalAudioTracks().find((track) => track.selected), activeLocalTextTracks = this.getLocalTextTracks().filter((track) => track.mode === \"showing\");\n    if (activeLocalAudioTrack) {\n      const remoteAudioTracks = this.#getRemoteTracks(chrome.cast.media.TrackType.AUDIO), remoteAudioTrack = this.#findRemoteTrack(remoteAudioTracks, activeLocalAudioTrack);\n      if (remoteAudioTrack) activeIds.push(remoteAudioTrack.trackId);\n    }\n    if (activeLocalTextTracks?.length) {\n      const remoteTextTracks = this.#getRemoteTracks(chrome.cast.media.TrackType.TEXT);\n      if (remoteTextTracks.length) {\n        for (const localTrack of activeLocalTextTracks) {\n          const remoteTextTrack = this.#findRemoteTrack(remoteTextTracks, localTrack);\n          if (remoteTextTrack) activeIds.push(remoteTextTrack.trackId);\n        }\n      }\n    }\n    return activeIds;\n  }\n  #syncLocalTracks() {\n    const localTextTracks = this.getLocalTextTracks();\n    if (!this.#cast.isMediaLoaded) return;\n    const remoteTextTracks = this.#getRemoteTracks(chrome.cast.media.TrackType.TEXT);\n    for (const localTrack of localTextTracks) {\n      const hasRemoteTrack = this.#findRemoteTrack(remoteTextTracks, localTrack);\n      if (!hasRemoteTrack) {\n        untrack(() => this.#onNewLocalTracks?.());\n        break;\n      }\n    }\n  }\n  syncRemoteTracks(event) {\n    if (!this.#cast.isMediaLoaded) return;\n    const localAudioTracks = this.#getLocalAudioTracks(), localTextTracks = this.getLocalTextTracks(), remoteAudioTracks = this.#getRemoteTracks(chrome.cast.media.TrackType.AUDIO), remoteTextTracks = this.#getRemoteTracks(chrome.cast.media.TrackType.TEXT);\n    for (const remoteAudioTrack of remoteAudioTracks) {\n      const hasLocalTrack = this.#findLocalTrack(localAudioTracks, remoteAudioTrack);\n      if (hasLocalTrack) continue;\n      const localAudioTrack = {\n        id: remoteAudioTrack.trackId.toString(),\n        label: remoteAudioTrack.name,\n        language: remoteAudioTrack.language,\n        kind: remoteAudioTrack.subtype ?? \"main\",\n        selected: false\n      };\n      this.#ctx.audioTracks[ListSymbol.add](localAudioTrack, event);\n    }\n    for (const remoteTextTrack of remoteTextTracks) {\n      const hasLocalTrack = this.#findLocalTrack(localTextTracks, remoteTextTrack);\n      if (hasLocalTrack) continue;\n      const localTextTrack = {\n        id: remoteTextTrack.trackId.toString(),\n        src: remoteTextTrack.trackContentId,\n        label: remoteTextTrack.name,\n        language: remoteTextTrack.language,\n        kind: remoteTextTrack.subtype.toLowerCase()\n      };\n      this.#ctx.textTracks.add(localTextTrack, event);\n    }\n  }\n  syncRemoteActiveIds(event) {\n    if (!this.#cast.isMediaLoaded) return;\n    const activeIds = this.#getRemoteActiveIds(), editRequest = new chrome.cast.media.EditTracksInfoRequest(activeIds);\n    this.#editTracksInfo(editRequest).catch((error) => {\n      {\n        this.#ctx.logger?.errorGroup(\"[vidstack] failed to edit cast tracks info\").labelledLog(\"Edit Request\", editRequest).labelledLog(\"Error\", error).dispatch();\n      }\n    });\n  }\n  #editTracksInfo(request) {\n    const media = getCastSessionMedia();\n    return new Promise((resolve, reject) => media?.editTracksInfo(request, resolve, reject));\n  }\n  #findLocalTrack(localTracks, remoteTrack) {\n    return localTracks.find((localTrack) => this.#isMatch(localTrack, remoteTrack));\n  }\n  #findRemoteTrack(remoteTracks, localTrack) {\n    return remoteTracks.find((remoteTrack) => this.#isMatch(localTrack, remoteTrack));\n  }\n  // Note: we can't rely on id matching because they will differ between local/remote. A local\n  // track id might not even exist.\n  #isMatch(localTrack, remoteTrack) {\n    return remoteTrack.name === localTrack.label && remoteTrack.language === localTrack.language && remoteTrack.subtype.toLowerCase() === localTrack.kind.toLowerCase();\n  }\n}\n\nclass GoogleCastProvider {\n  $$PROVIDER_TYPE = \"GOOGLE_CAST\";\n  scope = createScope();\n  #player;\n  #ctx;\n  #tracks;\n  #currentSrc = null;\n  #state = \"disconnected\";\n  #currentTime = 0;\n  #played = 0;\n  #seekableRange = new TimeRange(0, 0);\n  #timeRAF = new RAFLoop(this.#onAnimationFrame.bind(this));\n  #playerEventHandlers;\n  #reloadInfo = null;\n  #isIdle = false;\n  constructor(player, ctx) {\n    this.#player = player;\n    this.#ctx = ctx;\n    this.#tracks = new GoogleCastTracksManager(player, ctx, this.#onNewLocalTracks.bind(this));\n  }\n  get type() {\n    return \"google-cast\";\n  }\n  get currentSrc() {\n    return this.#currentSrc;\n  }\n  /**\n   * The Google Cast remote player.\n   *\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.RemotePlayer}\n   */\n  get player() {\n    return this.#player;\n  }\n  /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastContext}\n   */\n  get cast() {\n    return getCastContext();\n  }\n  /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastSession}\n   */\n  get session() {\n    return getCastSession();\n  }\n  /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/chrome.cast.media.Media}\n   */\n  get media() {\n    return getCastSessionMedia();\n  }\n  /**\n   * Whether the current Google Cast session belongs to this provider.\n   */\n  get hasActiveSession() {\n    return hasActiveCastSession(this.#currentSrc);\n  }\n  setup() {\n    this.#attachCastContextEventListeners();\n    this.#attachCastPlayerEventListeners();\n    this.#tracks.setup();\n    this.#ctx.notify(\"provider-setup\", this);\n  }\n  #attachCastContextEventListeners() {\n    listenCastContextEvent(\n      cast.framework.CastContextEventType.CAST_STATE_CHANGED,\n      this.#onCastStateChange.bind(this)\n    );\n  }\n  #attachCastPlayerEventListeners() {\n    const Event2 = cast.framework.RemotePlayerEventType, handlers = {\n      [Event2.IS_CONNECTED_CHANGED]: this.#onCastStateChange,\n      [Event2.IS_MEDIA_LOADED_CHANGED]: this.#onMediaLoadedChange,\n      [Event2.CAN_CONTROL_VOLUME_CHANGED]: this.#onCanControlVolumeChange,\n      [Event2.CAN_SEEK_CHANGED]: this.#onCanSeekChange,\n      [Event2.DURATION_CHANGED]: this.#onDurationChange,\n      [Event2.IS_MUTED_CHANGED]: this.#onVolumeChange,\n      [Event2.VOLUME_LEVEL_CHANGED]: this.#onVolumeChange,\n      [Event2.IS_PAUSED_CHANGED]: this.#onPausedChange,\n      [Event2.LIVE_SEEKABLE_RANGE_CHANGED]: this.#onProgress,\n      [Event2.PLAYER_STATE_CHANGED]: this.#onPlayerStateChange\n    };\n    this.#playerEventHandlers = handlers;\n    const handler = this.#onRemotePlayerEvent.bind(this);\n    for (const type of keysOf(handlers)) {\n      this.#player.controller.addEventListener(type, handler);\n    }\n    onDispose(() => {\n      for (const type of keysOf(handlers)) {\n        this.#player.controller.removeEventListener(type, handler);\n      }\n    });\n  }\n  async play() {\n    if (!this.#player.isPaused && !this.#isIdle) return;\n    if (this.#isIdle) {\n      await this.#reload(false, 0);\n      return;\n    }\n    this.#player.controller?.playOrPause();\n  }\n  async pause() {\n    if (this.#player.isPaused) return;\n    this.#player.controller?.playOrPause();\n  }\n  getMediaStatus(request) {\n    return new Promise((resolve, reject) => {\n      this.media?.getStatus(request, resolve, reject);\n    });\n  }\n  setMuted(muted) {\n    const hasChanged = muted && !this.#player.isMuted || !muted && this.#player.isMuted;\n    if (hasChanged) this.#player.controller?.muteOrUnmute();\n  }\n  setCurrentTime(time) {\n    this.#player.currentTime = time;\n    this.#ctx.notify(\"seeking\", time);\n    this.#player.controller?.seek();\n  }\n  setVolume(volume) {\n    this.#player.volumeLevel = volume;\n    this.#player.controller?.setVolumeLevel();\n  }\n  async loadSource(src) {\n    if (this.#reloadInfo?.src !== src) this.#reloadInfo = null;\n    if (hasActiveCastSession(src)) {\n      this.#resumeSession();\n      this.#currentSrc = src;\n      return;\n    }\n    this.#ctx.notify(\"load-start\");\n    const loadRequest = this.#buildLoadRequest(src), errorCode = await this.session.loadMedia(loadRequest);\n    if (errorCode) {\n      this.#currentSrc = null;\n      this.#ctx.notify(\"error\", Error(getCastErrorMessage(errorCode)));\n      return;\n    }\n    this.#currentSrc = src;\n  }\n  destroy() {\n    this.#reset();\n    this.#endSession();\n  }\n  #reset() {\n    if (!this.#reloadInfo) {\n      this.#played = 0;\n      this.#seekableRange = new TimeRange(0, 0);\n    }\n    this.#timeRAF.stop();\n    this.#currentTime = 0;\n    this.#reloadInfo = null;\n  }\n  #resumeSession() {\n    const resumeSessionEvent = new DOMEvent(\"resume-session\", { detail: this.session });\n    this.#onMediaLoadedChange(resumeSessionEvent);\n    const { muted, volume, savedState } = this.#ctx.$state, localState = savedState();\n    this.setCurrentTime(Math.max(this.#player.currentTime, localState?.currentTime ?? 0));\n    this.setMuted(muted());\n    this.setVolume(volume());\n    if (localState?.paused === false) this.play();\n  }\n  #endSession() {\n    this.cast.endCurrentSession(true);\n    const { remotePlaybackLoader } = this.#ctx.$state;\n    remotePlaybackLoader.set(null);\n  }\n  #disconnectFromReceiver() {\n    const { savedState } = this.#ctx.$state;\n    savedState.set({\n      paused: this.#player.isPaused,\n      currentTime: this.#player.currentTime\n    });\n    this.#endSession();\n  }\n  #onAnimationFrame() {\n    this.#onCurrentTimeChange();\n  }\n  #onRemotePlayerEvent(event) {\n    this.#playerEventHandlers[event.type].call(this, event);\n  }\n  #onCastStateChange(data) {\n    const castState = this.cast.getCastState(), state = castState === cast.framework.CastState.CONNECTED ? \"connected\" : castState === cast.framework.CastState.CONNECTING ? \"connecting\" : \"disconnected\";\n    if (this.#state === state) return;\n    const detail = { type: \"google-cast\", state }, trigger = this.#createEvent(data);\n    this.#state = state;\n    this.#ctx.notify(\"remote-playback-change\", detail, trigger);\n    if (state === \"disconnected\") {\n      this.#disconnectFromReceiver();\n    }\n  }\n  #onMediaLoadedChange(event) {\n    const hasLoaded = !!this.#player.isMediaLoaded;\n    if (!hasLoaded) return;\n    const src = peek(this.#ctx.$state.source);\n    Promise.resolve().then(() => {\n      if (src !== peek(this.#ctx.$state.source) || !this.#player.isMediaLoaded) return;\n      this.#reset();\n      const duration = this.#player.duration;\n      this.#seekableRange = new TimeRange(0, duration);\n      const detail = {\n        provider: this,\n        duration,\n        buffered: new TimeRange(0, 0),\n        seekable: this.#getSeekableRange()\n      }, trigger = this.#createEvent(event);\n      this.#ctx.notify(\"loaded-metadata\", void 0, trigger);\n      this.#ctx.notify(\"loaded-data\", void 0, trigger);\n      this.#ctx.notify(\"can-play\", detail, trigger);\n      this.#onCanControlVolumeChange();\n      this.#onCanSeekChange(event);\n      const { volume, muted } = this.#ctx.$state;\n      this.setVolume(volume());\n      this.setMuted(muted());\n      this.#timeRAF.start();\n      this.#tracks.syncRemoteTracks(trigger);\n      this.#tracks.syncRemoteActiveIds(trigger);\n    });\n  }\n  #onCanControlVolumeChange() {\n    this.#ctx.$state.canSetVolume.set(this.#player.canControlVolume);\n  }\n  #onCanSeekChange(event) {\n    const trigger = this.#createEvent(event);\n    this.#ctx.notify(\"stream-type-change\", this.#getStreamType(), trigger);\n  }\n  #getStreamType() {\n    const streamType = this.#player.mediaInfo?.streamType;\n    return streamType === chrome.cast.media.StreamType.LIVE ? this.#player.canSeek ? \"live:dvr\" : \"live\" : \"on-demand\";\n  }\n  #onCurrentTimeChange() {\n    if (this.#reloadInfo) return;\n    const currentTime = this.#player.currentTime;\n    if (currentTime === this.#currentTime) return;\n    this.#ctx.notify(\"time-change\", currentTime);\n    if (currentTime > this.#played) {\n      this.#played = currentTime;\n      this.#onProgress();\n    }\n    if (this.#ctx.$state.seeking()) {\n      this.#ctx.notify(\"seeked\", currentTime);\n    }\n    this.#currentTime = currentTime;\n  }\n  #onDurationChange(event) {\n    if (!this.#player.isMediaLoaded || this.#reloadInfo) return;\n    const duration = this.#player.duration, trigger = this.#createEvent(event);\n    this.#seekableRange = new TimeRange(0, duration);\n    this.#ctx.notify(\"duration-change\", duration, trigger);\n  }\n  #onVolumeChange(event) {\n    if (!this.#player.isMediaLoaded) return;\n    const detail = {\n      muted: this.#player.isMuted,\n      volume: this.#player.volumeLevel\n    }, trigger = this.#createEvent(event);\n    this.#ctx.notify(\"volume-change\", detail, trigger);\n  }\n  #onPausedChange(event) {\n    const trigger = this.#createEvent(event);\n    if (this.#player.isPaused) {\n      this.#ctx.notify(\"pause\", void 0, trigger);\n    } else {\n      this.#ctx.notify(\"play\", void 0, trigger);\n    }\n  }\n  #onProgress(event) {\n    const detail = {\n      seekable: this.#getSeekableRange(),\n      buffered: new TimeRange(0, this.#played)\n    }, trigger = event ? this.#createEvent(event) : void 0;\n    this.#ctx.notify(\"progress\", detail, trigger);\n  }\n  #onPlayerStateChange(event) {\n    const state = this.#player.playerState, PlayerState = chrome.cast.media.PlayerState;\n    this.#isIdle = state === PlayerState.IDLE;\n    if (state === PlayerState.PAUSED) return;\n    const trigger = this.#createEvent(event);\n    switch (state) {\n      case PlayerState.PLAYING:\n        this.#ctx.notify(\"playing\", void 0, trigger);\n        break;\n      case PlayerState.BUFFERING:\n        this.#ctx.notify(\"waiting\", void 0, trigger);\n        break;\n      case PlayerState.IDLE:\n        this.#timeRAF.stop();\n        this.#ctx.notify(\"pause\");\n        this.#ctx.notify(\"end\");\n        break;\n    }\n  }\n  #getSeekableRange() {\n    return this.#player.liveSeekableRange ? new TimeRange(this.#player.liveSeekableRange.start, this.#player.liveSeekableRange.end) : this.#seekableRange;\n  }\n  #createEvent(detail) {\n    return detail instanceof Event ? detail : new DOMEvent(detail.type, { detail });\n  }\n  #buildMediaInfo(src) {\n    const { streamType, title, poster } = this.#ctx.$state;\n    return new GoogleCastMediaInfoBuilder(src).setMetadata(title(), poster()).setStreamType(streamType()).setTracks(this.#tracks.getLocalTextTracks()).build();\n  }\n  #buildLoadRequest(src) {\n    const mediaInfo = this.#buildMediaInfo(src), request = new chrome.cast.media.LoadRequest(mediaInfo), savedState = this.#ctx.$state.savedState();\n    request.autoplay = (this.#reloadInfo?.paused ?? savedState?.paused) === false;\n    request.currentTime = this.#reloadInfo?.time ?? savedState?.currentTime ?? 0;\n    return request;\n  }\n  async #reload(paused, time) {\n    const src = peek(this.#ctx.$state.source);\n    this.#reloadInfo = { src, paused, time };\n    await this.loadSource(src);\n  }\n  #onNewLocalTracks() {\n    this.#reload(this.#player.isPaused, this.#player.currentTime).catch((error) => {\n      {\n        this.#ctx.logger?.errorGroup(\"[vidstack] cast failed to load new local tracks\").labelledLog(\"Error\", error).dispatch();\n      }\n    });\n  }\n}\n\nexport { GoogleCastProvider };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,IAAM,6BAAN,MAAiC;AAAA,EAC/B;AAAA,EACA,YAAY,KAAK;AACf,SAAK,QAAQ,IAAI,OAAO,KAAK,MAAM,UAAU,IAAI,KAAK,IAAI,IAAI;AAAA,EAChE;AAAA,EACA,QAAQ;AACN,WAAO,KAAK;AAAA,EACd;AAAA,EACA,cAAc,YAAY;AACxB,QAAI,WAAW,SAAS,MAAM,GAAG;AAC/B,WAAK,MAAM,aAAa,OAAO,KAAK,MAAM,WAAW;AAAA,IACvD,OAAO;AACL,WAAK,MAAM,aAAa,OAAO,KAAK,MAAM,WAAW;AAAA,IACvD;AACA,WAAO;AAAA,EACT;AAAA,EACA,UAAU,QAAQ;AAChB,SAAK,MAAM,SAAS,OAAO,IAAI,KAAK,eAAe;AACnD,WAAO;AAAA,EACT;AAAA,EACA,YAAY,OAAO,QAAQ;AACzB,SAAK,MAAM,WAAW,IAAI,OAAO,KAAK,MAAM,qBAAqB;AACjE,SAAK,MAAM,SAAS,QAAQ;AAC5B,SAAK,MAAM,SAAS,SAAS,CAAC,EAAE,KAAK,OAAO,CAAC;AAC7C,WAAO;AAAA,EACT;AAAA,EACA,gBAAgB,OAAO,SAAS;AAC9B,UAAM,YAAY,IAAI,OAAO,KAAK,MAAM,MAAM,SAAS,OAAO,KAAK,MAAM,UAAU,IAAI;AACvF,cAAU,OAAO,MAAM;AACvB,cAAU,iBAAiB,MAAM;AACjC,cAAU,mBAAmB;AAC7B,cAAU,WAAW,MAAM;AAC3B,cAAU,UAAU,MAAM,KAAK,YAAY;AAC3C,WAAO;AAAA,EACT;AACF;AAEA,IAAM,0BAAN,MAA8B;AAAA,EAC5B;AAAA,EACA;AAAA,EACA;AAAA,EACA,YAAYA,OAAM,KAAK,kBAAkB;AACvC,SAAK,QAAQA;AACb,SAAK,OAAO;AACZ,SAAK,oBAAoB;AAAA,EAC3B;AAAA,EACA,QAAQ;AACN,UAAM,sBAAsB,KAAK,oBAAoB,KAAK,IAAI;AAC9D,gBAAY,KAAK,KAAK,aAAa,UAAU,mBAAmB;AAChE,gBAAY,KAAK,KAAK,YAAY,eAAe,mBAAmB;AACpE,WAAO,KAAK,iBAAiB,KAAK,IAAI,CAAC;AAAA,EACzC;AAAA,EACA,qBAAqB;AACnB,WAAO,KAAK,KAAK,OAAO,WAAW,EAAE,OAAO,CAAC,UAAU,MAAM,OAAO,MAAM,SAAS,KAAK;AAAA,EAC1F;AAAA,EACA,uBAAuB;AACrB,WAAO,KAAK,KAAK,OAAO,YAAY;AAAA,EACtC;AAAA,EACA,iBAAiB,MAAM;AACrB,UAAM,SAAS,KAAK,MAAM,WAAW,UAAU,CAAC;AAChD,WAAO,OAAO,OAAO,OAAO,CAAC,UAAU,MAAM,SAAS,IAAI,IAAI;AAAA,EAChE;AAAA,EACA,sBAAsB;AACpB,UAAM,YAAY,CAAC,GAAG,wBAAwB,KAAK,qBAAqB,EAAE,KAAK,CAAC,UAAU,MAAM,QAAQ,GAAG,wBAAwB,KAAK,mBAAmB,EAAE,OAAO,CAAC,UAAU,MAAM,SAAS,SAAS;AACvM,QAAI,uBAAuB;AACzB,YAAM,oBAAoB,KAAK,iBAAiB,OAAO,KAAK,MAAM,UAAU,KAAK,GAAG,mBAAmB,KAAK,iBAAiB,mBAAmB,qBAAqB;AACrK,UAAI,iBAAkB,WAAU,KAAK,iBAAiB,OAAO;AAAA,IAC/D;AACA,QAAI,uBAAuB,QAAQ;AACjC,YAAM,mBAAmB,KAAK,iBAAiB,OAAO,KAAK,MAAM,UAAU,IAAI;AAC/E,UAAI,iBAAiB,QAAQ;AAC3B,mBAAW,cAAc,uBAAuB;AAC9C,gBAAM,kBAAkB,KAAK,iBAAiB,kBAAkB,UAAU;AAC1E,cAAI,gBAAiB,WAAU,KAAK,gBAAgB,OAAO;AAAA,QAC7D;AAAA,MACF;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,mBAAmB;AACjB,UAAM,kBAAkB,KAAK,mBAAmB;AAChD,QAAI,CAAC,KAAK,MAAM,cAAe;AAC/B,UAAM,mBAAmB,KAAK,iBAAiB,OAAO,KAAK,MAAM,UAAU,IAAI;AAC/E,eAAW,cAAc,iBAAiB;AACxC,YAAM,iBAAiB,KAAK,iBAAiB,kBAAkB,UAAU;AACzE,UAAI,CAAC,gBAAgB;AACnB,gBAAQ,MAAM,KAAK,oBAAoB,CAAC;AACxC;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,iBAAiB,OAAO;AACtB,QAAI,CAAC,KAAK,MAAM,cAAe;AAC/B,UAAM,mBAAmB,KAAK,qBAAqB,GAAG,kBAAkB,KAAK,mBAAmB,GAAG,oBAAoB,KAAK,iBAAiB,OAAO,KAAK,MAAM,UAAU,KAAK,GAAG,mBAAmB,KAAK,iBAAiB,OAAO,KAAK,MAAM,UAAU,IAAI;AAC1P,eAAW,oBAAoB,mBAAmB;AAChD,YAAM,gBAAgB,KAAK,gBAAgB,kBAAkB,gBAAgB;AAC7E,UAAI,cAAe;AACnB,YAAM,kBAAkB;AAAA,QACtB,IAAI,iBAAiB,QAAQ,SAAS;AAAA,QACtC,OAAO,iBAAiB;AAAA,QACxB,UAAU,iBAAiB;AAAA,QAC3B,MAAM,iBAAiB,WAAW;AAAA,QAClC,UAAU;AAAA,MACZ;AACA,WAAK,KAAK,YAAY,WAAW,GAAG,EAAE,iBAAiB,KAAK;AAAA,IAC9D;AACA,eAAW,mBAAmB,kBAAkB;AAC9C,YAAM,gBAAgB,KAAK,gBAAgB,iBAAiB,eAAe;AAC3E,UAAI,cAAe;AACnB,YAAM,iBAAiB;AAAA,QACrB,IAAI,gBAAgB,QAAQ,SAAS;AAAA,QACrC,KAAK,gBAAgB;AAAA,QACrB,OAAO,gBAAgB;AAAA,QACvB,UAAU,gBAAgB;AAAA,QAC1B,MAAM,gBAAgB,QAAQ,YAAY;AAAA,MAC5C;AACA,WAAK,KAAK,WAAW,IAAI,gBAAgB,KAAK;AAAA,IAChD;AAAA,EACF;AAAA,EACA,oBAAoB,OAAO;AACzB,QAAI,CAAC,KAAK,MAAM,cAAe;AAC/B,UAAM,YAAY,KAAK,oBAAoB,GAAG,cAAc,IAAI,OAAO,KAAK,MAAM,sBAAsB,SAAS;AACjH,SAAK,gBAAgB,WAAW,EAAE,MAAM,CAAC,UAAU;AACjD;AACE,aAAK,KAAK,QAAQ,WAAW,4CAA4C,EAAE,YAAY,gBAAgB,WAAW,EAAE,YAAY,SAAS,KAAK,EAAE,SAAS;AAAA,MAC3J;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,gBAAgB,SAAS;AACvB,UAAM,QAAQ,oBAAoB;AAClC,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW,OAAO,eAAe,SAAS,SAAS,MAAM,CAAC;AAAA,EACzF;AAAA,EACA,gBAAgB,aAAa,aAAa;AACxC,WAAO,YAAY,KAAK,CAAC,eAAe,KAAK,SAAS,YAAY,WAAW,CAAC;AAAA,EAChF;AAAA,EACA,iBAAiB,cAAc,YAAY;AACzC,WAAO,aAAa,KAAK,CAAC,gBAAgB,KAAK,SAAS,YAAY,WAAW,CAAC;AAAA,EAClF;AAAA;AAAA;AAAA,EAGA,SAAS,YAAY,aAAa;AAChC,WAAO,YAAY,SAAS,WAAW,SAAS,YAAY,aAAa,WAAW,YAAY,YAAY,QAAQ,YAAY,MAAM,WAAW,KAAK,YAAY;AAAA,EACpK;AACF;AAEA,IAAM,qBAAN,MAAyB;AAAA,EACvB,kBAAkB;AAAA,EAClB,QAAQ,YAAY;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AAAA,EACA,cAAc;AAAA,EACd,SAAS;AAAA,EACT,eAAe;AAAA,EACf,UAAU;AAAA,EACV,iBAAiB,IAAI,UAAU,GAAG,CAAC;AAAA,EACnC,WAAW,IAAI,QAAQ,KAAK,kBAAkB,KAAK,IAAI,CAAC;AAAA,EACxD;AAAA,EACA,cAAc;AAAA,EACd,UAAU;AAAA,EACV,YAAY,QAAQ,KAAK;AACvB,SAAK,UAAU;AACf,SAAK,OAAO;AACZ,SAAK,UAAU,IAAI,wBAAwB,QAAQ,KAAK,KAAK,kBAAkB,KAAK,IAAI,CAAC;AAAA,EAC3F;AAAA,EACA,IAAI,OAAO;AACT,WAAO;AAAA,EACT;AAAA,EACA,IAAI,aAAa;AACf,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,SAAS;AACX,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,OAAO;AACT,WAAO,eAAe;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,UAAU;AACZ,WAAO,eAAe;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,QAAQ;AACV,WAAO,oBAAoB;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,mBAAmB;AACrB,WAAO,qBAAqB,KAAK,WAAW;AAAA,EAC9C;AAAA,EACA,QAAQ;AACN,SAAK,iCAAiC;AACtC,SAAK,gCAAgC;AACrC,SAAK,QAAQ,MAAM;AACnB,SAAK,KAAK,OAAO,kBAAkB,IAAI;AAAA,EACzC;AAAA,EACA,mCAAmC;AACjC;AAAA,MACE,KAAK,UAAU,qBAAqB;AAAA,MACpC,KAAK,mBAAmB,KAAK,IAAI;AAAA,IACnC;AAAA,EACF;AAAA,EACA,kCAAkC;AAChC,UAAM,SAAS,KAAK,UAAU,uBAAuB,WAAW;AAAA,MAC9D,CAAC,OAAO,oBAAoB,GAAG,KAAK;AAAA,MACpC,CAAC,OAAO,uBAAuB,GAAG,KAAK;AAAA,MACvC,CAAC,OAAO,0BAA0B,GAAG,KAAK;AAAA,MAC1C,CAAC,OAAO,gBAAgB,GAAG,KAAK;AAAA,MAChC,CAAC,OAAO,gBAAgB,GAAG,KAAK;AAAA,MAChC,CAAC,OAAO,gBAAgB,GAAG,KAAK;AAAA,MAChC,CAAC,OAAO,oBAAoB,GAAG,KAAK;AAAA,MACpC,CAAC,OAAO,iBAAiB,GAAG,KAAK;AAAA,MACjC,CAAC,OAAO,2BAA2B,GAAG,KAAK;AAAA,MAC3C,CAAC,OAAO,oBAAoB,GAAG,KAAK;AAAA,IACtC;AACA,SAAK,uBAAuB;AAC5B,UAAM,UAAU,KAAK,qBAAqB,KAAK,IAAI;AACnD,eAAW,QAAQ,OAAO,QAAQ,GAAG;AACnC,WAAK,QAAQ,WAAW,iBAAiB,MAAM,OAAO;AAAA,IACxD;AACA,cAAU,MAAM;AACd,iBAAW,QAAQ,OAAO,QAAQ,GAAG;AACnC,aAAK,QAAQ,WAAW,oBAAoB,MAAM,OAAO;AAAA,MAC3D;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,MAAM,OAAO;AACX,QAAI,CAAC,KAAK,QAAQ,YAAY,CAAC,KAAK,QAAS;AAC7C,QAAI,KAAK,SAAS;AAChB,YAAM,KAAK,QAAQ,OAAO,CAAC;AAC3B;AAAA,IACF;AACA,SAAK,QAAQ,YAAY,YAAY;AAAA,EACvC;AAAA,EACA,MAAM,QAAQ;AACZ,QAAI,KAAK,QAAQ,SAAU;AAC3B,SAAK,QAAQ,YAAY,YAAY;AAAA,EACvC;AAAA,EACA,eAAe,SAAS;AACtB,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,WAAK,OAAO,UAAU,SAAS,SAAS,MAAM;AAAA,IAChD,CAAC;AAAA,EACH;AAAA,EACA,SAAS,OAAO;AACd,UAAM,aAAa,SAAS,CAAC,KAAK,QAAQ,WAAW,CAAC,SAAS,KAAK,QAAQ;AAC5E,QAAI,WAAY,MAAK,QAAQ,YAAY,aAAa;AAAA,EACxD;AAAA,EACA,eAAe,MAAM;AACnB,SAAK,QAAQ,cAAc;AAC3B,SAAK,KAAK,OAAO,WAAW,IAAI;AAChC,SAAK,QAAQ,YAAY,KAAK;AAAA,EAChC;AAAA,EACA,UAAU,QAAQ;AAChB,SAAK,QAAQ,cAAc;AAC3B,SAAK,QAAQ,YAAY,eAAe;AAAA,EAC1C;AAAA,EACA,MAAM,WAAW,KAAK;AACpB,QAAI,KAAK,aAAa,QAAQ,IAAK,MAAK,cAAc;AACtD,QAAI,qBAAqB,GAAG,GAAG;AAC7B,WAAK,eAAe;AACpB,WAAK,cAAc;AACnB;AAAA,IACF;AACA,SAAK,KAAK,OAAO,YAAY;AAC7B,UAAM,cAAc,KAAK,kBAAkB,GAAG,GAAG,YAAY,MAAM,KAAK,QAAQ,UAAU,WAAW;AACrG,QAAI,WAAW;AACb,WAAK,cAAc;AACnB,WAAK,KAAK,OAAO,SAAS,MAAM,oBAAoB,SAAS,CAAC,CAAC;AAC/D;AAAA,IACF;AACA,SAAK,cAAc;AAAA,EACrB;AAAA,EACA,UAAU;AACR,SAAK,OAAO;AACZ,SAAK,YAAY;AAAA,EACnB;AAAA,EACA,SAAS;AACP,QAAI,CAAC,KAAK,aAAa;AACrB,WAAK,UAAU;AACf,WAAK,iBAAiB,IAAI,UAAU,GAAG,CAAC;AAAA,IAC1C;AACA,SAAK,SAAS,KAAK;AACnB,SAAK,eAAe;AACpB,SAAK,cAAc;AAAA,EACrB;AAAA,EACA,iBAAiB;AACf,UAAM,qBAAqB,IAAI,SAAS,kBAAkB,EAAE,QAAQ,KAAK,QAAQ,CAAC;AAClF,SAAK,qBAAqB,kBAAkB;AAC5C,UAAM,EAAE,OAAO,QAAQ,WAAW,IAAI,KAAK,KAAK,QAAQ,aAAa,WAAW;AAChF,SAAK,eAAe,KAAK,IAAI,KAAK,QAAQ,aAAa,YAAY,eAAe,CAAC,CAAC;AACpF,SAAK,SAAS,MAAM,CAAC;AACrB,SAAK,UAAU,OAAO,CAAC;AACvB,QAAI,YAAY,WAAW,MAAO,MAAK,KAAK;AAAA,EAC9C;AAAA,EACA,cAAc;AACZ,SAAK,KAAK,kBAAkB,IAAI;AAChC,UAAM,EAAE,qBAAqB,IAAI,KAAK,KAAK;AAC3C,yBAAqB,IAAI,IAAI;AAAA,EAC/B;AAAA,EACA,0BAA0B;AACxB,UAAM,EAAE,WAAW,IAAI,KAAK,KAAK;AACjC,eAAW,IAAI;AAAA,MACb,QAAQ,KAAK,QAAQ;AAAA,MACrB,aAAa,KAAK,QAAQ;AAAA,IAC5B,CAAC;AACD,SAAK,YAAY;AAAA,EACnB;AAAA,EACA,oBAAoB;AAClB,SAAK,qBAAqB;AAAA,EAC5B;AAAA,EACA,qBAAqB,OAAO;AAC1B,SAAK,qBAAqB,MAAM,IAAI,EAAE,KAAK,MAAM,KAAK;AAAA,EACxD;AAAA,EACA,mBAAmB,MAAM;AACvB,UAAM,YAAY,KAAK,KAAK,aAAa,GAAG,QAAQ,cAAc,KAAK,UAAU,UAAU,YAAY,cAAc,cAAc,KAAK,UAAU,UAAU,aAAa,eAAe;AACxL,QAAI,KAAK,WAAW,MAAO;AAC3B,UAAM,SAAS,EAAE,MAAM,eAAe,MAAM,GAAG,UAAU,KAAK,aAAa,IAAI;AAC/E,SAAK,SAAS;AACd,SAAK,KAAK,OAAO,0BAA0B,QAAQ,OAAO;AAC1D,QAAI,UAAU,gBAAgB;AAC5B,WAAK,wBAAwB;AAAA,IAC/B;AAAA,EACF;AAAA,EACA,qBAAqB,OAAO;AAC1B,UAAM,YAAY,CAAC,CAAC,KAAK,QAAQ;AACjC,QAAI,CAAC,UAAW;AAChB,UAAM,MAAM,KAAK,KAAK,KAAK,OAAO,MAAM;AACxC,YAAQ,QAAQ,EAAE,KAAK,MAAM;AAC3B,UAAI,QAAQ,KAAK,KAAK,KAAK,OAAO,MAAM,KAAK,CAAC,KAAK,QAAQ,cAAe;AAC1E,WAAK,OAAO;AACZ,YAAM,WAAW,KAAK,QAAQ;AAC9B,WAAK,iBAAiB,IAAI,UAAU,GAAG,QAAQ;AAC/C,YAAM,SAAS;AAAA,QACb,UAAU;AAAA,QACV;AAAA,QACA,UAAU,IAAI,UAAU,GAAG,CAAC;AAAA,QAC5B,UAAU,KAAK,kBAAkB;AAAA,MACnC,GAAG,UAAU,KAAK,aAAa,KAAK;AACpC,WAAK,KAAK,OAAO,mBAAmB,QAAQ,OAAO;AACnD,WAAK,KAAK,OAAO,eAAe,QAAQ,OAAO;AAC/C,WAAK,KAAK,OAAO,YAAY,QAAQ,OAAO;AAC5C,WAAK,0BAA0B;AAC/B,WAAK,iBAAiB,KAAK;AAC3B,YAAM,EAAE,QAAQ,MAAM,IAAI,KAAK,KAAK;AACpC,WAAK,UAAU,OAAO,CAAC;AACvB,WAAK,SAAS,MAAM,CAAC;AACrB,WAAK,SAAS,MAAM;AACpB,WAAK,QAAQ,iBAAiB,OAAO;AACrC,WAAK,QAAQ,oBAAoB,OAAO;AAAA,IAC1C,CAAC;AAAA,EACH;AAAA,EACA,4BAA4B;AAC1B,SAAK,KAAK,OAAO,aAAa,IAAI,KAAK,QAAQ,gBAAgB;AAAA,EACjE;AAAA,EACA,iBAAiB,OAAO;AACtB,UAAM,UAAU,KAAK,aAAa,KAAK;AACvC,SAAK,KAAK,OAAO,sBAAsB,KAAK,eAAe,GAAG,OAAO;AAAA,EACvE;AAAA,EACA,iBAAiB;AACf,UAAM,aAAa,KAAK,QAAQ,WAAW;AAC3C,WAAO,eAAe,OAAO,KAAK,MAAM,WAAW,OAAO,KAAK,QAAQ,UAAU,aAAa,SAAS;AAAA,EACzG;AAAA,EACA,uBAAuB;AACrB,QAAI,KAAK,YAAa;AACtB,UAAM,cAAc,KAAK,QAAQ;AACjC,QAAI,gBAAgB,KAAK,aAAc;AACvC,SAAK,KAAK,OAAO,eAAe,WAAW;AAC3C,QAAI,cAAc,KAAK,SAAS;AAC9B,WAAK,UAAU;AACf,WAAK,YAAY;AAAA,IACnB;AACA,QAAI,KAAK,KAAK,OAAO,QAAQ,GAAG;AAC9B,WAAK,KAAK,OAAO,UAAU,WAAW;AAAA,IACxC;AACA,SAAK,eAAe;AAAA,EACtB;AAAA,EACA,kBAAkB,OAAO;AACvB,QAAI,CAAC,KAAK,QAAQ,iBAAiB,KAAK,YAAa;AACrD,UAAM,WAAW,KAAK,QAAQ,UAAU,UAAU,KAAK,aAAa,KAAK;AACzE,SAAK,iBAAiB,IAAI,UAAU,GAAG,QAAQ;AAC/C,SAAK,KAAK,OAAO,mBAAmB,UAAU,OAAO;AAAA,EACvD;AAAA,EACA,gBAAgB,OAAO;AACrB,QAAI,CAAC,KAAK,QAAQ,cAAe;AACjC,UAAM,SAAS;AAAA,MACb,OAAO,KAAK,QAAQ;AAAA,MACpB,QAAQ,KAAK,QAAQ;AAAA,IACvB,GAAG,UAAU,KAAK,aAAa,KAAK;AACpC,SAAK,KAAK,OAAO,iBAAiB,QAAQ,OAAO;AAAA,EACnD;AAAA,EACA,gBAAgB,OAAO;AACrB,UAAM,UAAU,KAAK,aAAa,KAAK;AACvC,QAAI,KAAK,QAAQ,UAAU;AACzB,WAAK,KAAK,OAAO,SAAS,QAAQ,OAAO;AAAA,IAC3C,OAAO;AACL,WAAK,KAAK,OAAO,QAAQ,QAAQ,OAAO;AAAA,IAC1C;AAAA,EACF;AAAA,EACA,YAAY,OAAO;AACjB,UAAM,SAAS;AAAA,MACb,UAAU,KAAK,kBAAkB;AAAA,MACjC,UAAU,IAAI,UAAU,GAAG,KAAK,OAAO;AAAA,IACzC,GAAG,UAAU,QAAQ,KAAK,aAAa,KAAK,IAAI;AAChD,SAAK,KAAK,OAAO,YAAY,QAAQ,OAAO;AAAA,EAC9C;AAAA,EACA,qBAAqB,OAAO;AAC1B,UAAM,QAAQ,KAAK,QAAQ,aAAa,cAAc,OAAO,KAAK,MAAM;AACxE,SAAK,UAAU,UAAU,YAAY;AACrC,QAAI,UAAU,YAAY,OAAQ;AAClC,UAAM,UAAU,KAAK,aAAa,KAAK;AACvC,YAAQ,OAAO;AAAA,MACb,KAAK,YAAY;AACf,aAAK,KAAK,OAAO,WAAW,QAAQ,OAAO;AAC3C;AAAA,MACF,KAAK,YAAY;AACf,aAAK,KAAK,OAAO,WAAW,QAAQ,OAAO;AAC3C;AAAA,MACF,KAAK,YAAY;AACf,aAAK,SAAS,KAAK;AACnB,aAAK,KAAK,OAAO,OAAO;AACxB,aAAK,KAAK,OAAO,KAAK;AACtB;AAAA,IACJ;AAAA,EACF;AAAA,EACA,oBAAoB;AAClB,WAAO,KAAK,QAAQ,oBAAoB,IAAI,UAAU,KAAK,QAAQ,kBAAkB,OAAO,KAAK,QAAQ,kBAAkB,GAAG,IAAI,KAAK;AAAA,EACzI;AAAA,EACA,aAAa,QAAQ;AACnB,WAAO,kBAAkB,QAAQ,SAAS,IAAI,SAAS,OAAO,MAAM,EAAE,OAAO,CAAC;AAAA,EAChF;AAAA,EACA,gBAAgB,KAAK;AACnB,UAAM,EAAE,YAAY,OAAO,OAAO,IAAI,KAAK,KAAK;AAChD,WAAO,IAAI,2BAA2B,GAAG,EAAE,YAAY,MAAM,GAAG,OAAO,CAAC,EAAE,cAAc,WAAW,CAAC,EAAE,UAAU,KAAK,QAAQ,mBAAmB,CAAC,EAAE,MAAM;AAAA,EAC3J;AAAA,EACA,kBAAkB,KAAK;AACrB,UAAM,YAAY,KAAK,gBAAgB,GAAG,GAAG,UAAU,IAAI,OAAO,KAAK,MAAM,YAAY,SAAS,GAAG,aAAa,KAAK,KAAK,OAAO,WAAW;AAC9I,YAAQ,YAAY,KAAK,aAAa,UAAU,YAAY,YAAY;AACxE,YAAQ,cAAc,KAAK,aAAa,QAAQ,YAAY,eAAe;AAC3E,WAAO;AAAA,EACT;AAAA,EACA,MAAM,QAAQ,QAAQ,MAAM;AAC1B,UAAM,MAAM,KAAK,KAAK,KAAK,OAAO,MAAM;AACxC,SAAK,cAAc,EAAE,KAAK,QAAQ,KAAK;AACvC,UAAM,KAAK,WAAW,GAAG;AAAA,EAC3B;AAAA,EACA,oBAAoB;AAClB,SAAK,QAAQ,KAAK,QAAQ,UAAU,KAAK,QAAQ,WAAW,EAAE,MAAM,CAAC,UAAU;AAC7E;AACE,aAAK,KAAK,QAAQ,WAAW,iDAAiD,EAAE,YAAY,SAAS,KAAK,EAAE,SAAS;AAAA,MACvH;AAAA,IACF,CAAC;AAAA,EACH;AACF;",
  "names": ["cast"]
}
