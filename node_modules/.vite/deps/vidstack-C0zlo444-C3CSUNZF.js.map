{
  "version": 3,
  "sources": ["../../vidstack/dev/chunks/vidstack-C0zlo444.js"],
  "sourcesContent": ["import { IS_CHROME, canGoogleCastSrc, IS_IOS } from './vidstack-CjhKISI0.js';\nimport { loadScript } from './vidstack-zG6PIeGg.js';\nimport { getCastContext, getCastSession, isCastConnected, hasLoadedCastFramework, getCastFrameworkURL, isCastAvailable, getCastErrorMessage, getDefaultCastOptions } from './vidstack-DDwbYVHV.js';\nimport { peek } from './vidstack-Bu2kfzUd.js';\n\nclass GoogleCastLoader {\n  name = \"google-cast\";\n  target;\n  #player;\n  /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastContext}\n   */\n  get cast() {\n    return getCastContext();\n  }\n  mediaType() {\n    return \"video\";\n  }\n  canPlay(src) {\n    return IS_CHROME && !IS_IOS && canGoogleCastSrc(src);\n  }\n  async prompt(ctx) {\n    let loadEvent, openEvent, errorEvent;\n    try {\n      loadEvent = await this.#loadCastFramework(ctx);\n      if (!this.#player) {\n        this.#player = new cast.framework.RemotePlayer();\n        new cast.framework.RemotePlayerController(this.#player);\n      }\n      openEvent = ctx.player.createEvent(\"google-cast-prompt-open\", {\n        trigger: loadEvent\n      });\n      ctx.player.dispatchEvent(openEvent);\n      this.#notifyRemoteStateChange(ctx, \"connecting\", openEvent);\n      await this.#showPrompt(peek(ctx.$props.googleCast));\n      ctx.$state.remotePlaybackInfo.set({\n        deviceName: getCastSession()?.getCastDevice().friendlyName\n      });\n      if (isCastConnected()) this.#notifyRemoteStateChange(ctx, \"connected\", openEvent);\n    } catch (code) {\n      const error = code instanceof Error ? code : this.#createError(\n        (code + \"\").toUpperCase(),\n        \"Prompt failed.\"\n      );\n      errorEvent = ctx.player.createEvent(\"google-cast-prompt-error\", {\n        detail: error,\n        trigger: openEvent ?? loadEvent,\n        cancelable: true\n      });\n      ctx.player.dispatch(errorEvent);\n      this.#notifyRemoteStateChange(\n        ctx,\n        isCastConnected() ? \"connected\" : \"disconnected\",\n        errorEvent\n      );\n      throw error;\n    } finally {\n      ctx.player.dispatch(\"google-cast-prompt-close\", {\n        trigger: errorEvent ?? openEvent ?? loadEvent\n      });\n    }\n  }\n  async load(ctx) {\n    if (!this.#player) {\n      throw Error(\"[vidstack] google cast player was not initialized\");\n    }\n    return new (await import('../providers/vidstack-google-cast.js')).GoogleCastProvider(this.#player, ctx);\n  }\n  async #loadCastFramework(ctx) {\n    if (hasLoadedCastFramework()) return;\n    const loadStartEvent = ctx.player.createEvent(\"google-cast-load-start\");\n    ctx.player.dispatch(loadStartEvent);\n    await loadScript(getCastFrameworkURL());\n    await customElements.whenDefined(\"google-cast-launcher\");\n    const loadedEvent = ctx.player.createEvent(\"google-cast-loaded\", { trigger: loadStartEvent });\n    ctx.player.dispatch(loadedEvent);\n    if (!isCastAvailable()) {\n      throw this.#createError(\"CAST_NOT_AVAILABLE\", \"Google Cast not available on this platform.\");\n    }\n    return loadedEvent;\n  }\n  async #showPrompt(options) {\n    this.#setOptions(options);\n    const errorCode = await this.cast.requestSession();\n    if (errorCode) {\n      throw this.#createError(\n        errorCode.toUpperCase(),\n        getCastErrorMessage(errorCode)\n      );\n    }\n  }\n  #setOptions(options) {\n    this.cast?.setOptions({\n      ...getDefaultCastOptions(),\n      ...options\n    });\n  }\n  #notifyRemoteStateChange(ctx, state, trigger) {\n    const detail = { type: \"google-cast\", state };\n    ctx.notify(\"remote-playback-change\", detail, trigger);\n  }\n  #createError(code, message) {\n    const error = Error(message);\n    error.code = code;\n    return error;\n  }\n}\n\nexport { GoogleCastLoader };\n"],
  "mappings": "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",
  "names": []
}
