import {
  LitElement,
  html
} from "./chunk-KR2MZO4H.js";
import {
  AirPlayButton,
  AudioGainRadioGroup,
  AudioGainSlider,
  AudioRadioGroup,
  CaptionButton,
  Captions,
  CaptionsRadioGroup,
  ChaptersRadioGroup,
  Controls,
  ControlsGroup,
  FullscreenButton,
  Gesture,
  GoogleCastButton,
  LiveButton,
  MediaAnnouncer,
  Menu,
  MenuButton,
  MenuItem,
  MenuItems,
  MenuPortal,
  MuteButton,
  PIPButton,
  PlayButton,
  Poster,
  QualityRadioGroup,
  QualitySlider,
  Radio,
  RadioGroup,
  SeekButton,
  Slider,
  SliderChapters,
  SliderPreview,
  SliderValue,
  SliderVideo,
  SpeedRadioGroup,
  SpeedSlider,
  Thumbnail,
  Time,
  TimeSlider,
  ToggleButton,
  Tooltip,
  TooltipContent,
  TooltipTrigger,
  VolumeSlider,
  sliderState
} from "./chunk-LMSWYLTP.js";
import "./chunk-UIAM5PXF.js";
import "./chunk-UXSBNDRB.js";
import "./chunk-B4U6Y3XF.js";
import "./chunk-HWHIPY3V.js";
import "./chunk-5E2V5D5K.js";
import {
  useMediaContext
} from "./chunk-6MUPOGVK.js";
import {
  cloneTemplate,
  cloneTemplateContent,
  createTemplate,
  isHTMLElement,
  requestScopedAnimationFrame
} from "./chunk-5PJILO4O.js";
import {
  watchCueTextChange
} from "./chunk-H5MW443I.js";
import "./chunk-EYSTOJL2.js";
import "./chunk-R6TEQYLH.js";
import {
  BOOLEAN,
  Component,
  Host,
  computed,
  defineCustomElement,
  effect,
  isBoolean,
  isString,
  setAttribute,
  signal,
  useState
} from "./chunk-P5T6DRDE.js";
import "./chunk-Y6CJWCTZ.js";
import "./chunk-G3PMV62Z.js";

// node_modules/vidstack/dev/chunks/vidstack-BHXY4Pjj.js
var imgTemplate = createTemplate(
  '<img loading="eager" decoding="async" aria-hidden="true">'
);
var MediaThumbnailElement = class extends Host(HTMLElement, Thumbnail) {
  static tagName = "media-thumbnail";
  static attrs = {
    crossOrigin: "crossorigin"
  };
  #media;
  #img = this.#createImg();
  onSetup() {
    this.#media = useMediaContext();
    this.$state.img.set(this.#img);
  }
  onConnect() {
    const { src, crossOrigin } = this.$state;
    if (this.#img.parentNode !== this) {
      this.prepend(this.#img);
    }
    effect(() => {
      setAttribute(this.#img, "src", src());
      setAttribute(this.#img, "crossorigin", crossOrigin());
    });
  }
  #createImg() {
    return cloneTemplateContent(imgTemplate);
  }
};
var MediaTimeElement = class extends Host(HTMLElement, Time) {
  static tagName = "media-time";
  onConnect() {
    effect(() => {
      this.textContent = this.$state.timeText();
    });
  }
};
var MediaAirPlayButtonElement = class extends Host(HTMLElement, AirPlayButton) {
  static tagName = "media-airplay-button";
};
var MediaCaptionButtonElement = class extends Host(HTMLElement, CaptionButton) {
  static tagName = "media-caption-button";
};
var MediaFullscreenButtonElement = class extends Host(HTMLElement, FullscreenButton) {
  static tagName = "media-fullscreen-button";
};
var MediaLiveButtonElement = class extends Host(HTMLElement, LiveButton) {
  static tagName = "media-live-button";
};
var MediaMuteButtonElement = class extends Host(HTMLElement, MuteButton) {
  static tagName = "media-mute-button";
};
var MediaPIPButtonElement = class extends Host(HTMLElement, PIPButton) {
  static tagName = "media-pip-button";
};
var MediaPlayButtonElement = class extends Host(HTMLElement, PlayButton) {
  static tagName = "media-play-button";
};
var MediaSeekButtonElement = class extends Host(HTMLElement, SeekButton) {
  static tagName = "media-seek-button";
};
function renderMenuItemsTemplate(el, onCreate) {
  requestScopedAnimationFrame(() => {
    if (!el.connectScope) return;
    const template = el.querySelector("template");
    if (!template) return;
    effect(() => {
      if (!template.content.firstElementChild?.localName && !template.firstElementChild) {
        throw Error("[vidstack] menu items template requires root element");
      }
      const options = el.getOptions();
      cloneTemplate(template, options.length, (radio, i) => {
        const { label, value } = options[i], labelEl = radio.querySelector(`[data-part="label"]`);
        radio.setAttribute("value", value);
        if (labelEl) {
          if (isString(label)) {
            labelEl.textContent = label;
          } else {
            effect(() => {
              labelEl.textContent = label();
            });
          }
        }
        onCreate?.(radio, options[i], i);
      });
    });
  });
}
var MediaAudioRadioGroupElement = class extends Host(HTMLElement, AudioRadioGroup) {
  static tagName = "media-audio-radio-group";
  onConnect() {
    renderMenuItemsTemplate(this);
  }
};
var MediaCaptionsRadioGroupElement = class extends Host(HTMLElement, CaptionsRadioGroup) {
  static tagName = "media-captions-radio-group";
  onConnect() {
    renderMenuItemsTemplate(this);
  }
};
var MediaMenuElement = class extends Host(HTMLElement, Menu) {
  static tagName = "media-menu";
};
var MediaMenuButtonElement = class extends Host(HTMLElement, MenuButton) {
  static tagName = "media-menu-button";
};
var MediaMenuItemElement = class extends Host(HTMLElement, MenuItem) {
  static tagName = "media-menu-item";
};
var MediaMenuItemsElement = class extends Host(HTMLElement, MenuItems) {
  static tagName = "media-menu-items";
};
var MediaSpeedRadioGroupElement = class extends Host(HTMLElement, SpeedRadioGroup) {
  static tagName = "media-speed-radio-group";
  onConnect() {
    renderMenuItemsTemplate(this);
  }
};
var MediaQualityRadioGroupElement = class extends Host(HTMLElement, QualityRadioGroup) {
  static tagName = "media-quality-radio-group";
  onConnect() {
    renderMenuItemsTemplate(this, (el, option) => {
      const bitrate = option.bitrate, bitrateEl = el.querySelector('[data-part="bitrate"]');
      if (bitrate && bitrateEl) {
        effect(() => {
          bitrateEl.textContent = bitrate() || "";
        });
      }
    });
  }
};
var MediaRadioElement = class extends Host(HTMLElement, Radio) {
  static tagName = "media-radio";
};
var MediaSliderThumbnailElement = class extends MediaThumbnailElement {
  static tagName = "media-slider-thumbnail";
  #media;
  #slider;
  onSetup() {
    super.onSetup();
    this.#media = useMediaContext();
    this.#slider = useState(Slider.state);
  }
  onConnect() {
    super.onConnect();
    effect(this.#watchTime.bind(this));
  }
  #watchTime() {
    const { duration, clipStartTime } = this.#media.$state;
    this.time = clipStartTime() + this.#slider.pointerRate() * duration();
  }
};
var MediaSliderValueElement = class extends Host(HTMLElement, SliderValue) {
  static tagName = "media-slider-value";
  static attrs = {
    padMinutes: {
      converter: BOOLEAN
    }
  };
  onConnect() {
    effect(() => {
      this.textContent = this.getValueText();
    });
  }
};
var MediaTimeSliderElement = class extends Host(HTMLElement, TimeSlider) {
  static tagName = "media-time-slider";
};
var MediaSliderPreviewElement = class extends Host(HTMLElement, SliderPreview) {
  static tagName = "media-slider-preview";
};
var MediaVolumeSliderElement = class extends Host(HTMLElement, VolumeSlider) {
  static tagName = "media-volume-slider";
};

// node_modules/vidstack/dev/chunks/vidstack-Bd1W8lfp.js
var MediaCaptionsElement = class extends Host(HTMLElement, Captions) {
  static tagName = "media-captions";
};
var MediaGestureElement = class extends Host(HTMLElement, Gesture) {
  static tagName = "media-gesture";
};
var MediaAnnouncerElement = class extends Host(HTMLElement, MediaAnnouncer) {
  static tagName = "media-announcer";
};
var MediaControlsElement = class extends Host(HTMLElement, Controls) {
  static tagName = "media-controls";
};
var MediaControlsGroupElement = class extends Host(HTMLElement, ControlsGroup) {
  static tagName = "media-controls-group";
};
var Title = class extends Component {
};
var MediaTitleElement = class extends Host(HTMLElement, Title) {
  static tagName = "media-title";
  #media;
  onSetup() {
    this.#media = useMediaContext();
  }
  onConnect() {
    effect(this.#watchTitle.bind(this));
  }
  #watchTitle() {
    const { title } = this.#media.$state;
    this.textContent = title();
  }
};
var ChapterTitle = class extends Component {
  static props = {
    defaultText: ""
  };
};
var MediaChapterTitleElement = class extends Host(HTMLElement, ChapterTitle) {
  static tagName = "media-chapter-title";
  #media;
  #chapterTitle;
  onSetup() {
    this.#media = useMediaContext();
    this.#chapterTitle = signal("");
  }
  onConnect() {
    const tracks = this.#media.textTracks;
    watchCueTextChange(tracks, "chapters", this.#chapterTitle.set);
    effect(this.#watchChapterTitle.bind(this));
  }
  #watchChapterTitle() {
    const { defaultText } = this.$props;
    this.textContent = this.#chapterTitle() || defaultText();
  }
};
var Spinner = class extends Component {
  static props = {
    size: 96,
    trackWidth: 8,
    fillPercent: 50
  };
  onConnect(el) {
    requestScopedAnimationFrame(() => {
      if (!this.connectScope) return;
      const root = el.querySelector("svg"), track = root.firstElementChild, trackFill = track.nextElementSibling;
      effect(this.#update.bind(this, root, track, trackFill));
    });
  }
  #update(root, track, trackFill) {
    const { size, trackWidth, fillPercent } = this.$props;
    setAttribute(root, "width", size());
    setAttribute(root, "height", size());
    setAttribute(track, "stroke-width", trackWidth());
    setAttribute(trackFill, "stroke-width", trackWidth());
    setAttribute(trackFill, "stroke-dashoffset", 100 - fillPercent());
  }
};
var MediaSpinnerElement = class extends Host(LitElement, Spinner) {
  static tagName = "media-spinner";
  render() {
    return html`
      <svg fill="none" viewBox="0 0 120 120" aria-hidden="true" data-part="root">
        <circle cx="60" cy="60" r="54" stroke="currentColor" data-part="track"></circle>
        <circle
          cx="60"
          cy="60"
          r="54"
          stroke="currentColor"
          pathLength="100"
          stroke-dasharray="100"
          data-part="track-fill"
        ></circle>
      </svg>
    `;
  }
};
var MediaLayout = class extends Component {
  static props = {
    when: false
  };
};
var MediaLayoutElement = class extends Host(HTMLElement, MediaLayout) {
  static tagName = "media-layout";
  #media;
  onSetup() {
    this.#media = useMediaContext();
  }
  onConnect() {
    effect(this.#watchWhen.bind(this));
  }
  #watchWhen() {
    const root = this.firstElementChild, isTemplate = root?.localName === "template", when = this.$props.when(), matches = isBoolean(when) ? when : computed(() => when(this.#media.player.state))();
    if (!matches) {
      if (isTemplate) {
        this.textContent = "";
        this.appendChild(root);
      } else if (isHTMLElement(root)) {
        root.style.display = "none";
      }
      return;
    }
    if (isTemplate) {
      this.append(root.content.cloneNode(true));
    } else if (isHTMLElement(root)) {
      root.style.display = "";
    }
  }
};
var MediaGoogleCastButtonElement = class extends Host(HTMLElement, GoogleCastButton) {
  static tagName = "media-google-cast-button";
};
var MediaToggleButtonElement = class extends Host(HTMLElement, ToggleButton) {
  static tagName = "media-toggle-button";
};
var MediaTooltipElement = class extends Host(HTMLElement, Tooltip) {
  static tagName = "media-tooltip";
};
var MediaTooltipTriggerElement = class extends Host(HTMLElement, TooltipTrigger) {
  static tagName = "media-tooltip-trigger";
  onConnect() {
    this.style.display = "contents";
  }
};
var MediaTooltipContentElement = class extends Host(HTMLElement, TooltipContent) {
  static tagName = "media-tooltip-content";
};
var MediaMenuPortalElement = class extends Host(HTMLElement, MenuPortal) {
  static tagName = "media-menu-portal";
  static attrs = {
    disabled: {
      converter(value) {
        if (isString(value)) return value;
        return value !== null;
      }
    }
  };
};
var MediaChaptersRadioGroupElement = class extends Host(HTMLElement, ChaptersRadioGroup) {
  static tagName = "media-chapters-radio-group";
  onConnect() {
    renderMenuItemsTemplate(this, (el, option) => {
      const { cue, startTime, duration } = option, thumbnailEl = el.querySelector(".vds-thumbnail,media-thumbnail"), startEl = el.querySelector('[data-part="start-time"]'), durationEl = el.querySelector('[data-part="duration"]');
      if (startEl) startEl.textContent = startTime;
      if (durationEl) durationEl.textContent = duration;
      if (thumbnailEl) {
        thumbnailEl.setAttribute("time", cue.startTime + "");
        effect(() => {
          const thumbnails = this.$props.thumbnails();
          if ("src" in thumbnailEl) {
            thumbnailEl.src = thumbnails;
          } else if (isString(thumbnails)) {
            thumbnailEl.setAttribute("src", thumbnails);
          }
        });
      }
    });
  }
};
var MediaAudioGainRadioGroupElement = class extends Host(HTMLElement, AudioGainRadioGroup) {
  static tagName = "media-audio-gain-radio-group";
  onConnect() {
    renderMenuItemsTemplate(this);
  }
};
var MediaRadioGroupElement = class extends Host(HTMLElement, RadioGroup) {
  static tagName = "media-radio-group";
};
var MediaSliderElement = class extends Host(HTMLElement, Slider) {
  static tagName = "media-slider";
};
var videoTemplate = createTemplate(
  `<video muted playsinline preload="none" style="max-width: unset;"></video>`
);
var MediaSliderVideoElement = class extends Host(HTMLElement, SliderVideo) {
  static tagName = "media-slider-video";
  #media;
  #video = this.#createVideo();
  onSetup() {
    this.#media = useMediaContext();
    this.$state.video.set(this.#video);
  }
  onConnect() {
    const { canLoad } = this.#media.$state, { src, crossOrigin } = this.$state;
    if (this.#video.parentNode !== this) {
      this.prepend(this.#video);
    }
    effect(() => {
      setAttribute(this.#video, "crossorigin", crossOrigin());
      setAttribute(this.#video, "preload", canLoad() ? "auto" : "none");
      setAttribute(this.#video, "src", src());
    });
  }
  #createVideo() {
    return cloneTemplateContent(videoTemplate);
  }
};
var MediaAudioGainSliderElement = class extends Host(HTMLElement, AudioGainSlider) {
  static tagName = "media-audio-gain-slider";
};
var MediaSpeedSliderElement = class extends Host(HTMLElement, SpeedSlider) {
  static tagName = "media-speed-slider";
};
var MediaQualitySliderElement = class extends Host(HTMLElement, QualitySlider) {
  static tagName = "media-quality-slider";
};
var MediaSliderChaptersElement = class extends Host(HTMLElement, SliderChapters) {
  static tagName = "media-slider-chapters";
  #template = null;
  onConnect() {
    requestScopedAnimationFrame(() => {
      if (!this.connectScope) return;
      const template = this.querySelector("template");
      if (template) {
        this.#template = template;
        effect(this.#renderTemplate.bind(this));
      }
    });
  }
  #renderTemplate() {
    if (!this.#template) return;
    const elements = cloneTemplate(this.#template, this.cues.length || 1);
    this.setRefs(elements);
  }
};
var SliderSteps = class extends Component {
};
var MediaSliderStepsElement = class extends Host(HTMLElement, SliderSteps) {
  static tagName = "media-slider-steps";
  #template = null;
  onConnect(el) {
    requestScopedAnimationFrame(() => {
      if (!this.connectScope) return;
      this.#template = el.querySelector("template");
      if (this.#template) effect(this.#render.bind(this));
    });
  }
  #render() {
    if (!this.#template) return;
    const { min, max, step } = useState(sliderState), steps = (max() - min()) / step();
    cloneTemplate(this.#template, Math.floor(steps) + 1);
  }
};

// node_modules/vidstack/dev/chunks/vidstack-DGDvUbvO.js
var MediaPosterElement = class extends Host(HTMLElement, Poster) {
  static tagName = "media-poster";
  static attrs = {
    crossOrigin: "crossorigin"
  };
  #img = document.createElement("img");
  onSetup() {
    this.$state.img.set(this.#img);
  }
  onConnect() {
    const { src, alt, crossOrigin } = this.$state;
    effect(() => {
      const { loading, hidden } = this.$state;
      this.#img.style.display = loading() || hidden() ? "none" : "";
    });
    effect(() => {
      setAttribute(this.#img, "alt", alt());
      setAttribute(this.#img, "crossorigin", crossOrigin());
      setAttribute(this.#img, "src", src());
    });
    if (this.#img.parentNode !== this) {
      this.prepend(this.#img);
    }
  }
};

// node_modules/vidstack/dev/define/vidstack-player-ui.js
defineCustomElement(MediaLayoutElement);
defineCustomElement(MediaControlsElement);
defineCustomElement(MediaControlsGroupElement);
defineCustomElement(MediaPosterElement);
defineCustomElement(MediaAnnouncerElement);
defineCustomElement(MediaTooltipElement);
defineCustomElement(MediaTooltipTriggerElement);
defineCustomElement(MediaTooltipContentElement);
defineCustomElement(MediaPlayButtonElement);
defineCustomElement(MediaMuteButtonElement);
defineCustomElement(MediaCaptionButtonElement);
defineCustomElement(MediaFullscreenButtonElement);
defineCustomElement(MediaPIPButtonElement);
defineCustomElement(MediaSeekButtonElement);
defineCustomElement(MediaAirPlayButtonElement);
defineCustomElement(MediaGoogleCastButtonElement);
defineCustomElement(MediaToggleButtonElement);
defineCustomElement(MediaSliderElement);
defineCustomElement(MediaAudioGainSliderElement);
defineCustomElement(MediaVolumeSliderElement);
defineCustomElement(MediaTimeSliderElement);
defineCustomElement(MediaSpeedSliderElement);
defineCustomElement(MediaQualitySliderElement);
defineCustomElement(MediaSliderChaptersElement);
defineCustomElement(MediaSliderStepsElement);
defineCustomElement(MediaSliderPreviewElement);
defineCustomElement(MediaSliderValueElement);
defineCustomElement(MediaSliderThumbnailElement);
defineCustomElement(MediaSliderVideoElement);
defineCustomElement(MediaMenuElement);
defineCustomElement(MediaMenuButtonElement);
defineCustomElement(MediaMenuPortalElement);
defineCustomElement(MediaMenuItemsElement);
defineCustomElement(MediaMenuItemElement);
defineCustomElement(MediaAudioRadioGroupElement);
defineCustomElement(MediaCaptionsRadioGroupElement);
defineCustomElement(MediaSpeedRadioGroupElement);
defineCustomElement(MediaAudioGainRadioGroupElement);
defineCustomElement(MediaQualityRadioGroupElement);
defineCustomElement(MediaChaptersRadioGroupElement);
defineCustomElement(MediaRadioGroupElement);
defineCustomElement(MediaRadioElement);
defineCustomElement(MediaGestureElement);
defineCustomElement(MediaThumbnailElement);
defineCustomElement(MediaCaptionsElement);
defineCustomElement(MediaLiveButtonElement);
defineCustomElement(MediaTimeElement);
defineCustomElement(MediaTitleElement);
defineCustomElement(MediaChapterTitleElement);
defineCustomElement(MediaSpinnerElement);
//# sourceMappingURL=vidstack_player_ui.js.map
